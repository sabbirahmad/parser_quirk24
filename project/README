Sabbir Ahmad
ahmadsabbir
ahmad.sab@husky.neu.edu
parser

The folder contains four files. 
        (1) lexical_analyzer.l
        (2) parser_generator.y
        (3) parser24
        (4) README

************************* How to Build the Parser *************************

Flex is used to build the lexical analyzer from "lexical_analyzer.l" file.
Flex generates "lex.yy.c" file.

Bison is used to generate the parser from "parser_generator.y" file.
Bison generates two files: "parser_generator.tab.c" and 
"parser_generator.tab.h". The later file contains the definition for the 
tokens that are to be used by the "lex.yy.c".

GCC is used to generate the executable parser from the C files generated
from flex and bison. 

Executing "parser24" shell script builds (and runs) the parser. (See below)


************************** How to Run the Parser **************************

parser24 is a shell script, which uses flex and bison to generate the 
corresponding C files. Then gcc is used to build the executable file 
from the C files generated from flex and bison earlier. 

The parser24 script takes two arguments, 
        first: the source Quirk24 file,
        second: the output file for abstract syntax tree.

Command: ./parser24 example.q24 example.ast

Command "./parser24 clean" cleans up the folder by deleting the files 
generated by flex, bison and gcc.
(see parser24 for detailed description)

The line 38 in parser24 file "./cleanup24 $2 $2" is commented out, you can 
uncomment this command to get the cleaned up version of the AST. 
The "cleanup24" script must be present in the folder which is not included. 


******************************* Issues ************************************

The parser should be able to handle all the correct syntax and fail on 
incorrect syntax for Quirk24.

The parser continues scanning until EOF is encountered in the Quirk24
source file. If you want the parser to discard the lines that remain in 
the source file after the whole Quirk24 grammar matches correctly, 
uncomment the "return 1;" part from the "program: protodecs classdecs stm"  
rule in line 52 in "parser_generator.y" file. Then the parser will return 
from there after the grammar is matched and discard the lines at the end, 
if present.

All the files provided are fairly commented for better understanding. 


********************************* END *************************************
