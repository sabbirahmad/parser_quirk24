protocol primes {
    fun divides (int d, int n) : bool;
    fun isPrime (int n) : bool;
}

class prime implements primes {
    () { }

    fun divides (int d, int n) : bool {
        int q = n / d;
        int r = n - q * d;
        return r == 0;
    }

    fun isPrime (int n) : bool {
        printInt (n);
        printLine();
        if (n < 2)
            return false;
        else if (n == 2)
            return true;
        else if (n == 2 * (n / 2))
            return false;
        else {
            int d = 3;
            while (d < n) {
                if (divides (d, n))
                    return false;
                else d = d + 2;
            }
            return true;
        }
    }

    // Every kind of expression there is,
    // except for new expressions with a type application.

    fun expressions () {
        bool b = true || false || true;
        int n = 3 * 4 * 5 + 6 - 7 / 8;
        float x = n;
        b = b && true && false && b;
        b = b && n < 14 && b;
        null;
        new prime().isPrime(13) || b && b || x < 3.4;
        new int[][][][45][n];
        lambda (int a, int b) : bool { return a < b; } (3, 4) || true;
        lambda (float x, float y, float z) { x + y + z; } (x, x, x);
        lambda (float x) { x + x + x; return; } (3.7);
        'a';
        "abc";
        13;
        25.0;
        n == 3;
        n != 3;
        n < 3;
        n <= 3;
        n > 3;
        n >= 3;
        ! (n > 3);
        n + -4 - 5 - -6;
    }
}

{
    primes c = new prime();
    printBool (c.isPrime (readInt()));
    printLine();
}

