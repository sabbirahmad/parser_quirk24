Grammar

    0 $accept: program $end

    1 program: protodecs classdecs stm

    2 protodec: PROTOCOL typevars extends LBRACE funprotos RBRACE

    3 typevars: /* empty */
    4         | LANGLE tvars RANGLE

    5 extends: /* empty */
    6        | EXTENDS typeapps

    7 typeapp: TYPEID
    8        | TYPEID LANGLE types RANGLE
    9        | TVAR

   10 funproto: FUN ID typevars LPAR formals RPAR SEMICOLON
   11         | FUN ID typevars LPAR formals RPAR COLON rtype SEMICOLON

   12 classdec: CLASS ID typevars IMPLEMENTS typeapps classbody

   13 classbody: LBRACE init bodydecs RBRACE

   14 init: LPAR formals RPAR block

   15 bodydec: constdec
   16        | globaldec
   17        | fielddec
   18        | fundec

   19 constdec: CONSTANT PRIMTYPE ID ASSIGNOP literal SEMICOLON

   20 globaldec: STATIC PRIMTYPE ID ASSIGNOP literal SEMICOLON

   21 fielddec: formal SEMICOLON

   22 formal: type ID

   23 fundec: FUN ID typevars LPAR formals RPAR block
   24       | FUN ID typevars LPAR formals RPAR COLON rtype block

   25 block: LBRACE localdecs stms RBRACE

   26 localdec: vardec
   27         | fundec

   28 vardec: type ID ASSIGNOP exp SEMICOLON

   29 type: PRIMTYPE
   30     | typeapp
   31     | type LBRACKET RBRACKET
   32     | FUNCTION LPAR LPAR types RPAR ARROW rtype RPAR

   33 rtype: type
   34      | VOID

   35 stm: SEMICOLON
   36    | exp SEMICOLON
   37    | IF LPAR exp RPAR stm ELSE stm
   38    | WHILE LPAR exp RPAR stm
   39    | FOR LPAR vardec exp SEMICOLON exp RPAR stm
   40    | RETURN SEMICOLON
   41    | RETURN exp SEMICOLON
   42    | block
   43    | HALT LPAR exp RPAR SEMICOLON

   44 exp: lhs
   45    | lhs ASSIGNOP exp

   46 lhs: disjunct
   47    | disjunct OROP lhs

   48 disjunct: conjunct
   49         | conjunct ANDOP disjunct

   50 conjunct: simple
   51         | simple RELOP simple
   52         | simple LANGLE simple
   53         | simple RANGLE simple

   54 simple: term
   55       | simple ADDOP term
   56       | simple MINUS term

   57 term: factor
   58     | term MULOP factor

   59 factor: UNOP factor
   60       | MINUS factor
   61       | literal factorrest
   62       | NEW ID LPAR actuals RPAR factorrest
   63       | NEW ID LANGLE types RANGLE LPAR actuals RPAR factorrest
   64       | NEW type LBRACKET exp RBRACKET factorrest
   65       | LAMBDA LPAR formals RPAR block factorrest
   66       | LAMBDA LPAR formals RPAR COLON rtype block factorrest
   67       | LPAR exp RPAR factorrest
   68       | ID factorrest

   69 factorrest: /* empty */
   70           | LPAR actuals RPAR factorrest
   71           | DOT ID factorrest
   72           | LBRACKET exp RBRACKET factorrest

   73 literal: NULLVALUE
   74        | TRUE
   75        | FALSE
   76        | CHARLITERAL
   77        | STRINGLITERAL
   78        | INTLITERAL
   79        | FLOATLITERAL

   80 tvars: TVAR
   81      | TVAR COMMA tvars

   82 protodecs: /* empty */
   83          | protodec protodecs

   84 typeapps: /* empty */
   85         | typeapp typeappsrest

   86 typeappsrest: /* empty */
   87             | COMMA typeapp typeappsrest

   88 funprotos: /* empty */
   89          | funproto funprotos

   90 classdecs: /* empty */
   91          | classdec classdecs

   92 types: /* empty */
   93      | type typesrest

   94 typesrest: /* empty */
   95          | COMMA type typesrest

   96 bodydecs: /* empty */
   97         | bodydec bodydecs

   98 localdecs: /* empty */
   99          | localdec localdecs

  100 stms: /* empty */
  101     | stm stms

  102 formals: /* empty */
  103        | formal formalsrest

  104 formalsrest: /* empty */
  105            | COMMA formal formalsrest

  106 actuals: /* empty */
  107        | exp actualsrest

  108 actualsrest: /* empty */
  109            | COMMA exp actualsrest


Terminals, with rules where they appear

$end (0) 0
error (256)
SEMICOLON (258) 10 11 19 20 21 28 35 36 39 40 41 43
COMMA (259) 81 87 95 105 109
COLON (260) 11 24 66
LPAR (261) 10 11 14 23 24 32 37 38 39 43 62 63 65 66 67 70
RPAR (262) 10 11 14 23 24 32 37 38 39 43 62 63 65 66 67 70
LBRACE (263) 2 13 25
RBRACE (264) 2 13 25
LBRACKET (265) 31 64 72
RBRACKET (266) 31 64 72
ARROW (267) 32
DOT (268) 71
VOID (269) 34
NULLVALUE (270) 73
TRUE (271) 74
FALSE (272) 75
FUNCTION (273) 32
EXTENDS (274) 6
IMPLEMENTS (275) 12
FUN (276) 10 11 23 24
CLASS (277) 12
RETURN (278) 40 41
IF (279) 37
ELSE (280) 37
WHILE (281) 38
FOR (282) 39
HALT (283) 43
NEW (284) 62 63 64
LAMBDA (285) 65 66
CONSTANT (286) 19
STATIC (287) 20
INTLITERAL (288) 78
FLOATLITERAL (289) 79
ID (290) 10 11 12 19 20 22 23 24 28 62 63 68 71
TVAR (291) 9 80 81
ASSIGNOP (292) 19 20 28 45
OROP (293) 47
ANDOP (294) 49
RELOP (295) 51
ADDOP (296) 55
MULOP (297) 58
UNOP (298) 59
PRIMTYPE (299) 19 20 29
CHARLITERAL (300) 76
STRINGLITERAL (301) 77
MINUS (302) 56 60
LANGLE (303) 4 8 52 63
RANGLE (304) 4 8 53 63
PROTOCOL (305) 2
TYPEID (306) 7 8


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
protodec (54)
    on left: 2, on right: 83
typevars (55)
    on left: 3 4, on right: 2 10 11 12 23 24
extends (56)
    on left: 5 6, on right: 2
typeapp (57)
    on left: 7 8 9, on right: 30 85 87
funproto (58)
    on left: 10 11, on right: 89
classdec (59)
    on left: 12, on right: 91
classbody (60)
    on left: 13, on right: 12
init (61)
    on left: 14, on right: 13
bodydec (62)
    on left: 15 16 17 18, on right: 97
constdec (63)
    on left: 19, on right: 15
globaldec (64)
    on left: 20, on right: 16
fielddec (65)
    on left: 21, on right: 17
formal (66)
    on left: 22, on right: 21 103 105
fundec (67)
    on left: 23 24, on right: 18 27
block (68)
    on left: 25, on right: 14 23 24 42 65 66
localdec (69)
    on left: 26 27, on right: 99
vardec (70)
    on left: 28, on right: 26 39
type (71)
    on left: 29 30 31 32, on right: 22 28 31 33 64 93 95
rtype (72)
    on left: 33 34, on right: 11 24 32 66
stm (73)
    on left: 35 36 37 38 39 40 41 42 43, on right: 1 37 38 39 101
exp (74)
    on left: 44 45, on right: 28 36 37 38 39 41 43 45 64 67 72 107
    109
lhs (75)
    on left: 46 47, on right: 44 45 47
disjunct (76)
    on left: 48 49, on right: 46 47 49
conjunct (77)
    on left: 50 51 52 53, on right: 48 49
simple (78)
    on left: 54 55 56, on right: 50 51 52 53 55 56
term (79)
    on left: 57 58, on right: 54 55 56 58
factor (80)
    on left: 59 60 61 62 63 64 65 66 67 68, on right: 57 58 59 60
factorrest (81)
    on left: 69 70 71 72, on right: 61 62 63 64 65 66 67 68 70 71 72
literal (82)
    on left: 73 74 75 76 77 78 79, on right: 19 20 61
tvars (83)
    on left: 80 81, on right: 4 81
protodecs (84)
    on left: 82 83, on right: 1 83
typeapps (85)
    on left: 84 85, on right: 6 12
typeappsrest (86)
    on left: 86 87, on right: 85 87
funprotos (87)
    on left: 88 89, on right: 2 89
classdecs (88)
    on left: 90 91, on right: 1 91
types (89)
    on left: 92 93, on right: 8 32 63
typesrest (90)
    on left: 94 95, on right: 93 95
bodydecs (91)
    on left: 96 97, on right: 13 97
localdecs (92)
    on left: 98 99, on right: 25 99
stms (93)
    on left: 100 101, on right: 25 101
formals (94)
    on left: 102 103, on right: 10 11 14 23 24 65 66
formalsrest (95)
    on left: 104 105, on right: 103 105
actuals (96)
    on left: 106 107, on right: 62 63 70
actualsrest (97)
    on left: 108 109, on right: 107 109


state 0

    0 $accept: . program $end

    PROTOCOL  shift, and go to state 1

    $default  reduce using rule 82 (protodecs)

    program    go to state 2
    protodec   go to state 3
    protodecs  go to state 4


state 1

    2 protodec: PROTOCOL . typevars extends LBRACE funprotos RBRACE

    LANGLE  shift, and go to state 5

    $default  reduce using rule 3 (typevars)

    typevars  go to state 6


state 2

    0 $accept: program . $end

    $end  shift, and go to state 7


state 3

   83 protodecs: protodec . protodecs

    PROTOCOL  shift, and go to state 1

    $default  reduce using rule 82 (protodecs)

    protodec   go to state 3
    protodecs  go to state 8


state 4

    1 program: protodecs . classdecs stm

    CLASS  shift, and go to state 9

    $default  reduce using rule 90 (classdecs)

    classdec   go to state 10
    classdecs  go to state 11


state 5

    4 typevars: LANGLE . tvars RANGLE

    TVAR  shift, and go to state 12

    tvars  go to state 13


state 6

    2 protodec: PROTOCOL typevars . extends LBRACE funprotos RBRACE

    EXTENDS  shift, and go to state 14

    $default  reduce using rule 5 (extends)

    extends  go to state 15


state 7

    0 $accept: program $end .

    $default  accept


state 8

   83 protodecs: protodec protodecs .

    $default  reduce using rule 83 (protodecs)


state 9

   12 classdec: CLASS . ID typevars IMPLEMENTS typeapps classbody

    ID  shift, and go to state 16


state 10

   91 classdecs: classdec . classdecs

    CLASS  shift, and go to state 9

    $default  reduce using rule 90 (classdecs)

    classdec   go to state 10
    classdecs  go to state 17


state 11

    1 program: protodecs classdecs . stm

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    block     go to state 38
    stm       go to state 39
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 12

   80 tvars: TVAR .
   81      | TVAR . COMMA tvars

    COMMA  shift, and go to state 48

    $default  reduce using rule 80 (tvars)


state 13

    4 typevars: LANGLE tvars . RANGLE

    RANGLE  shift, and go to state 49


state 14

    6 extends: EXTENDS . typeapps

    TVAR    shift, and go to state 50
    TYPEID  shift, and go to state 51

    $default  reduce using rule 84 (typeapps)

    typeapp   go to state 52
    typeapps  go to state 53


state 15

    2 protodec: PROTOCOL typevars extends . LBRACE funprotos RBRACE

    LBRACE  shift, and go to state 54


state 16

   12 classdec: CLASS ID . typevars IMPLEMENTS typeapps classbody

    LANGLE  shift, and go to state 5

    $default  reduce using rule 3 (typevars)

    typevars  go to state 55


state 17

   91 classdecs: classdec classdecs .

    $default  reduce using rule 91 (classdecs)


state 18

   35 stm: SEMICOLON .

    $default  reduce using rule 35 (stm)


state 19

   67 factor: LPAR . exp RPAR factorrest

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 56
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 20

   25 block: LBRACE . localdecs stms RBRACE

    FUNCTION  shift, and go to state 57
    FUN       shift, and go to state 58
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 98 (localdecs)

    typeapp    go to state 60
    fundec     go to state 61
    localdec   go to state 62
    vardec     go to state 63
    type       go to state 64
    localdecs  go to state 65


state 21

   73 literal: NULLVALUE .

    $default  reduce using rule 73 (literal)


state 22

   74 literal: TRUE .

    $default  reduce using rule 74 (literal)


state 23

   75 literal: FALSE .

    $default  reduce using rule 75 (literal)


state 24

   40 stm: RETURN . SEMICOLON
   41    | RETURN . exp SEMICOLON

    SEMICOLON      shift, and go to state 66
    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 67
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 25

   37 stm: IF . LPAR exp RPAR stm ELSE stm

    LPAR  shift, and go to state 68


state 26

   38 stm: WHILE . LPAR exp RPAR stm

    LPAR  shift, and go to state 69


state 27

   39 stm: FOR . LPAR vardec exp SEMICOLON exp RPAR stm

    LPAR  shift, and go to state 70


state 28

   43 stm: HALT . LPAR exp RPAR SEMICOLON

    LPAR  shift, and go to state 71


state 29

   62 factor: NEW . ID LPAR actuals RPAR factorrest
   63       | NEW . ID LANGLE types RANGLE LPAR actuals RPAR factorrest
   64       | NEW . type LBRACKET exp RBRACKET factorrest

    FUNCTION  shift, and go to state 57
    ID        shift, and go to state 72
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    type     go to state 73


state 30

   65 factor: LAMBDA . LPAR formals RPAR block factorrest
   66       | LAMBDA . LPAR formals RPAR COLON rtype block factorrest

    LPAR  shift, and go to state 74


state 31

   78 literal: INTLITERAL .

    $default  reduce using rule 78 (literal)


state 32

   79 literal: FLOATLITERAL .

    $default  reduce using rule 79 (literal)


state 33

   68 factor: ID . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 78


state 34

   59 factor: UNOP . factor

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    factor   go to state 79
    literal  go to state 47


state 35

   76 literal: CHARLITERAL .

    $default  reduce using rule 76 (literal)


state 36

   77 literal: STRINGLITERAL .

    $default  reduce using rule 77 (literal)


state 37

   60 factor: MINUS . factor

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    factor   go to state 80
    literal  go to state 47


state 38

   42 stm: block .

    $default  reduce using rule 42 (stm)


state 39

    1 program: protodecs classdecs stm .

    $default  reduce using rule 1 (program)


state 40

   36 stm: exp . SEMICOLON

    SEMICOLON  shift, and go to state 81


state 41

   44 exp: lhs .
   45    | lhs . ASSIGNOP exp

    ASSIGNOP  shift, and go to state 82

    $default  reduce using rule 44 (exp)


state 42

   46 lhs: disjunct .
   47    | disjunct . OROP lhs

    OROP  shift, and go to state 83

    $default  reduce using rule 46 (lhs)


state 43

   48 disjunct: conjunct .
   49         | conjunct . ANDOP disjunct

    ANDOP  shift, and go to state 84

    $default  reduce using rule 48 (disjunct)


state 44

   50 conjunct: simple .
   51         | simple . RELOP simple
   52         | simple . LANGLE simple
   53         | simple . RANGLE simple
   55 simple: simple . ADDOP term
   56       | simple . MINUS term

    RELOP   shift, and go to state 85
    ADDOP   shift, and go to state 86
    MINUS   shift, and go to state 87
    LANGLE  shift, and go to state 88
    RANGLE  shift, and go to state 89

    $default  reduce using rule 50 (conjunct)


state 45

   54 simple: term .
   58 term: term . MULOP factor

    MULOP  shift, and go to state 90

    $default  reduce using rule 54 (simple)


state 46

   57 term: factor .

    $default  reduce using rule 57 (term)


state 47

   61 factor: literal . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 91


state 48

   81 tvars: TVAR COMMA . tvars

    TVAR  shift, and go to state 12

    tvars  go to state 92


state 49

    4 typevars: LANGLE tvars RANGLE .

    $default  reduce using rule 4 (typevars)


state 50

    9 typeapp: TVAR .

    $default  reduce using rule 9 (typeapp)


state 51

    7 typeapp: TYPEID .
    8        | TYPEID . LANGLE types RANGLE

    LANGLE  shift, and go to state 93

    $default  reduce using rule 7 (typeapp)


state 52

   85 typeapps: typeapp . typeappsrest

    COMMA  shift, and go to state 94

    $default  reduce using rule 86 (typeappsrest)

    typeappsrest  go to state 95


state 53

    6 extends: EXTENDS typeapps .

    $default  reduce using rule 6 (extends)


state 54

    2 protodec: PROTOCOL typevars extends LBRACE . funprotos RBRACE

    FUN  shift, and go to state 96

    $default  reduce using rule 88 (funprotos)

    funproto   go to state 97
    funprotos  go to state 98


state 55

   12 classdec: CLASS ID typevars . IMPLEMENTS typeapps classbody

    IMPLEMENTS  shift, and go to state 99


state 56

   67 factor: LPAR exp . RPAR factorrest

    RPAR  shift, and go to state 100


state 57

   32 type: FUNCTION . LPAR LPAR types RPAR ARROW rtype RPAR

    LPAR  shift, and go to state 101


state 58

   23 fundec: FUN . ID typevars LPAR formals RPAR block
   24       | FUN . ID typevars LPAR formals RPAR COLON rtype block

    ID  shift, and go to state 102


state 59

   29 type: PRIMTYPE .

    $default  reduce using rule 29 (type)


state 60

   30 type: typeapp .

    $default  reduce using rule 30 (type)


state 61

   27 localdec: fundec .

    $default  reduce using rule 27 (localdec)


state 62

   99 localdecs: localdec . localdecs

    FUNCTION  shift, and go to state 57
    FUN       shift, and go to state 58
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 98 (localdecs)

    typeapp    go to state 60
    fundec     go to state 61
    localdec   go to state 62
    vardec     go to state 63
    type       go to state 64
    localdecs  go to state 103


state 63

   26 localdec: vardec .

    $default  reduce using rule 26 (localdec)


state 64

   28 vardec: type . ID ASSIGNOP exp SEMICOLON
   31 type: type . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 104
    ID        shift, and go to state 105


state 65

   25 block: LBRACE localdecs . stms RBRACE

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    $default  reduce using rule 100 (stms)

    block     go to state 38
    stm       go to state 106
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47
    stms      go to state 107


state 66

   40 stm: RETURN SEMICOLON .

    $default  reduce using rule 40 (stm)


state 67

   41 stm: RETURN exp . SEMICOLON

    SEMICOLON  shift, and go to state 108


state 68

   37 stm: IF LPAR . exp RPAR stm ELSE stm

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 109
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 69

   38 stm: WHILE LPAR . exp RPAR stm

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 110
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 70

   39 stm: FOR LPAR . vardec exp SEMICOLON exp RPAR stm

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    vardec   go to state 111
    type     go to state 64


state 71

   43 stm: HALT LPAR . exp RPAR SEMICOLON

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 112
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 72

   62 factor: NEW ID . LPAR actuals RPAR factorrest
   63       | NEW ID . LANGLE types RANGLE LPAR actuals RPAR factorrest

    LPAR    shift, and go to state 113
    LANGLE  shift, and go to state 114


state 73

   31 type: type . LBRACKET RBRACKET
   64 factor: NEW type . LBRACKET exp RBRACKET factorrest

    LBRACKET  shift, and go to state 115


state 74

   65 factor: LAMBDA LPAR . formals RPAR block factorrest
   66       | LAMBDA LPAR . formals RPAR COLON rtype block factorrest

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 102 (formals)

    typeapp  go to state 60
    formal   go to state 116
    type     go to state 117
    formals  go to state 118


state 75

   70 factorrest: LPAR . actuals RPAR factorrest

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    $default  reduce using rule 106 (actuals)

    exp       go to state 119
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47
    actuals   go to state 120


state 76

   72 factorrest: LBRACKET . exp RBRACKET factorrest

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 121
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 77

   71 factorrest: DOT . ID factorrest

    ID  shift, and go to state 122


state 78

   68 factor: ID factorrest .

    $default  reduce using rule 68 (factor)


state 79

   59 factor: UNOP factor .

    $default  reduce using rule 59 (factor)


state 80

   60 factor: MINUS factor .

    $default  reduce using rule 60 (factor)


state 81

   36 stm: exp SEMICOLON .

    $default  reduce using rule 36 (stm)


state 82

   45 exp: lhs ASSIGNOP . exp

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 123
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 83

   47 lhs: disjunct OROP . lhs

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    lhs       go to state 124
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 84

   49 disjunct: conjunct ANDOP . disjunct

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    disjunct  go to state 125
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 85

   51 conjunct: simple RELOP . simple

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    simple   go to state 126
    term     go to state 45
    factor   go to state 46
    literal  go to state 47


state 86

   55 simple: simple ADDOP . term

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    term     go to state 127
    factor   go to state 46
    literal  go to state 47


state 87

   56 simple: simple MINUS . term

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    term     go to state 128
    factor   go to state 46
    literal  go to state 47


state 88

   52 conjunct: simple LANGLE . simple

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    simple   go to state 129
    term     go to state 45
    factor   go to state 46
    literal  go to state 47


state 89

   53 conjunct: simple RANGLE . simple

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    simple   go to state 130
    term     go to state 45
    factor   go to state 46
    literal  go to state 47


state 90

   58 term: term MULOP . factor

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    factor   go to state 131
    literal  go to state 47


state 91

   61 factor: literal factorrest .

    $default  reduce using rule 61 (factor)


state 92

   81 tvars: TVAR COMMA tvars .

    $default  reduce using rule 81 (tvars)


state 93

    8 typeapp: TYPEID LANGLE . types RANGLE

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 92 (types)

    typeapp  go to state 60
    type     go to state 132
    types    go to state 133


state 94

   87 typeappsrest: COMMA . typeapp typeappsrest

    TVAR    shift, and go to state 50
    TYPEID  shift, and go to state 51

    typeapp  go to state 134


state 95

   85 typeapps: typeapp typeappsrest .

    $default  reduce using rule 85 (typeapps)


state 96

   10 funproto: FUN . ID typevars LPAR formals RPAR SEMICOLON
   11         | FUN . ID typevars LPAR formals RPAR COLON rtype SEMICOLON

    ID  shift, and go to state 135


state 97

   89 funprotos: funproto . funprotos

    FUN  shift, and go to state 96

    $default  reduce using rule 88 (funprotos)

    funproto   go to state 97
    funprotos  go to state 136


state 98

    2 protodec: PROTOCOL typevars extends LBRACE funprotos . RBRACE

    RBRACE  shift, and go to state 137


state 99

   12 classdec: CLASS ID typevars IMPLEMENTS . typeapps classbody

    TVAR    shift, and go to state 50
    TYPEID  shift, and go to state 51

    $default  reduce using rule 84 (typeapps)

    typeapp   go to state 52
    typeapps  go to state 138


state 100

   67 factor: LPAR exp RPAR . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 139


state 101

   32 type: FUNCTION LPAR . LPAR types RPAR ARROW rtype RPAR

    LPAR  shift, and go to state 140


state 102

   23 fundec: FUN ID . typevars LPAR formals RPAR block
   24       | FUN ID . typevars LPAR formals RPAR COLON rtype block

    LANGLE  shift, and go to state 5

    $default  reduce using rule 3 (typevars)

    typevars  go to state 141


state 103

   99 localdecs: localdec localdecs .

    $default  reduce using rule 99 (localdecs)


state 104

   31 type: type LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 142


state 105

   28 vardec: type ID . ASSIGNOP exp SEMICOLON

    ASSIGNOP  shift, and go to state 143


state 106

  101 stms: stm . stms

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    $default  reduce using rule 100 (stms)

    block     go to state 38
    stm       go to state 106
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47
    stms      go to state 144


state 107

   25 block: LBRACE localdecs stms . RBRACE

    RBRACE  shift, and go to state 145


state 108

   41 stm: RETURN exp SEMICOLON .

    $default  reduce using rule 41 (stm)


state 109

   37 stm: IF LPAR exp . RPAR stm ELSE stm

    RPAR  shift, and go to state 146


state 110

   38 stm: WHILE LPAR exp . RPAR stm

    RPAR  shift, and go to state 147


state 111

   39 stm: FOR LPAR vardec . exp SEMICOLON exp RPAR stm

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 148
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 112

   43 stm: HALT LPAR exp . RPAR SEMICOLON

    RPAR  shift, and go to state 149


state 113

   62 factor: NEW ID LPAR . actuals RPAR factorrest

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    $default  reduce using rule 106 (actuals)

    exp       go to state 119
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47
    actuals   go to state 150


state 114

   63 factor: NEW ID LANGLE . types RANGLE LPAR actuals RPAR factorrest

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 92 (types)

    typeapp  go to state 60
    type     go to state 132
    types    go to state 151


state 115

   31 type: type LBRACKET . RBRACKET
   64 factor: NEW type LBRACKET . exp RBRACKET factorrest

    LPAR           shift, and go to state 19
    RBRACKET       shift, and go to state 142
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 152
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 116

  103 formals: formal . formalsrest

    COMMA  shift, and go to state 153

    $default  reduce using rule 104 (formalsrest)

    formalsrest  go to state 154


state 117

   22 formal: type . ID
   31 type: type . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 104
    ID        shift, and go to state 155


state 118

   65 factor: LAMBDA LPAR formals . RPAR block factorrest
   66       | LAMBDA LPAR formals . RPAR COLON rtype block factorrest

    RPAR  shift, and go to state 156


state 119

  107 actuals: exp . actualsrest

    COMMA  shift, and go to state 157

    $default  reduce using rule 108 (actualsrest)

    actualsrest  go to state 158


state 120

   70 factorrest: LPAR actuals . RPAR factorrest

    RPAR  shift, and go to state 159


state 121

   72 factorrest: LBRACKET exp . RBRACKET factorrest

    RBRACKET  shift, and go to state 160


state 122

   71 factorrest: DOT ID . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 161


state 123

   45 exp: lhs ASSIGNOP exp .

    $default  reduce using rule 45 (exp)


state 124

   47 lhs: disjunct OROP lhs .

    $default  reduce using rule 47 (lhs)


state 125

   49 disjunct: conjunct ANDOP disjunct .

    $default  reduce using rule 49 (disjunct)


state 126

   51 conjunct: simple RELOP simple .
   55 simple: simple . ADDOP term
   56       | simple . MINUS term

    ADDOP  shift, and go to state 86
    MINUS  shift, and go to state 87

    $default  reduce using rule 51 (conjunct)


state 127

   55 simple: simple ADDOP term .
   58 term: term . MULOP factor

    MULOP  shift, and go to state 90

    $default  reduce using rule 55 (simple)


state 128

   56 simple: simple MINUS term .
   58 term: term . MULOP factor

    MULOP  shift, and go to state 90

    $default  reduce using rule 56 (simple)


state 129

   52 conjunct: simple LANGLE simple .
   55 simple: simple . ADDOP term
   56       | simple . MINUS term

    ADDOP  shift, and go to state 86
    MINUS  shift, and go to state 87

    $default  reduce using rule 52 (conjunct)


state 130

   53 conjunct: simple RANGLE simple .
   55 simple: simple . ADDOP term
   56       | simple . MINUS term

    ADDOP  shift, and go to state 86
    MINUS  shift, and go to state 87

    $default  reduce using rule 53 (conjunct)


state 131

   58 term: term MULOP factor .

    $default  reduce using rule 58 (term)


state 132

   31 type: type . LBRACKET RBRACKET
   93 types: type . typesrest

    COMMA     shift, and go to state 162
    LBRACKET  shift, and go to state 104

    $default  reduce using rule 94 (typesrest)

    typesrest  go to state 163


state 133

    8 typeapp: TYPEID LANGLE types . RANGLE

    RANGLE  shift, and go to state 164


state 134

   87 typeappsrest: COMMA typeapp . typeappsrest

    COMMA  shift, and go to state 94

    $default  reduce using rule 86 (typeappsrest)

    typeappsrest  go to state 165


state 135

   10 funproto: FUN ID . typevars LPAR formals RPAR SEMICOLON
   11         | FUN ID . typevars LPAR formals RPAR COLON rtype SEMICOLON

    LANGLE  shift, and go to state 5

    $default  reduce using rule 3 (typevars)

    typevars  go to state 166


state 136

   89 funprotos: funproto funprotos .

    $default  reduce using rule 89 (funprotos)


state 137

    2 protodec: PROTOCOL typevars extends LBRACE funprotos RBRACE .

    $default  reduce using rule 2 (protodec)


state 138

   12 classdec: CLASS ID typevars IMPLEMENTS typeapps . classbody

    LBRACE  shift, and go to state 167

    classbody  go to state 168


state 139

   67 factor: LPAR exp RPAR factorrest .

    $default  reduce using rule 67 (factor)


state 140

   32 type: FUNCTION LPAR LPAR . types RPAR ARROW rtype RPAR

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 92 (types)

    typeapp  go to state 60
    type     go to state 132
    types    go to state 169


state 141

   23 fundec: FUN ID typevars . LPAR formals RPAR block
   24       | FUN ID typevars . LPAR formals RPAR COLON rtype block

    LPAR  shift, and go to state 170


state 142

   31 type: type LBRACKET RBRACKET .

    $default  reduce using rule 31 (type)


state 143

   28 vardec: type ID ASSIGNOP . exp SEMICOLON

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 171
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 144

  101 stms: stm stms .

    $default  reduce using rule 101 (stms)


state 145

   25 block: LBRACE localdecs stms RBRACE .

    $default  reduce using rule 25 (block)


state 146

   37 stm: IF LPAR exp RPAR . stm ELSE stm

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    block     go to state 38
    stm       go to state 172
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 147

   38 stm: WHILE LPAR exp RPAR . stm

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    block     go to state 38
    stm       go to state 173
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 148

   39 stm: FOR LPAR vardec exp . SEMICOLON exp RPAR stm

    SEMICOLON  shift, and go to state 174


state 149

   43 stm: HALT LPAR exp RPAR . SEMICOLON

    SEMICOLON  shift, and go to state 175


state 150

   62 factor: NEW ID LPAR actuals . RPAR factorrest

    RPAR  shift, and go to state 176


state 151

   63 factor: NEW ID LANGLE types . RANGLE LPAR actuals RPAR factorrest

    RANGLE  shift, and go to state 177


state 152

   64 factor: NEW type LBRACKET exp . RBRACKET factorrest

    RBRACKET  shift, and go to state 178


state 153

  105 formalsrest: COMMA . formal formalsrest

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    formal   go to state 179
    type     go to state 117


state 154

  103 formals: formal formalsrest .

    $default  reduce using rule 103 (formals)


state 155

   22 formal: type ID .

    $default  reduce using rule 22 (formal)


state 156

   65 factor: LAMBDA LPAR formals RPAR . block factorrest
   66       | LAMBDA LPAR formals RPAR . COLON rtype block factorrest

    COLON   shift, and go to state 180
    LBRACE  shift, and go to state 20

    block  go to state 181


state 157

  109 actualsrest: COMMA . exp actualsrest

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 182
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 158

  107 actuals: exp actualsrest .

    $default  reduce using rule 107 (actuals)


state 159

   70 factorrest: LPAR actuals RPAR . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 183


state 160

   72 factorrest: LBRACKET exp RBRACKET . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 184


state 161

   71 factorrest: DOT ID factorrest .

    $default  reduce using rule 71 (factorrest)


state 162

   95 typesrest: COMMA . type typesrest

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    type     go to state 185


state 163

   93 types: type typesrest .

    $default  reduce using rule 93 (types)


state 164

    8 typeapp: TYPEID LANGLE types RANGLE .

    $default  reduce using rule 8 (typeapp)


state 165

   87 typeappsrest: COMMA typeapp typeappsrest .

    $default  reduce using rule 87 (typeappsrest)


state 166

   10 funproto: FUN ID typevars . LPAR formals RPAR SEMICOLON
   11         | FUN ID typevars . LPAR formals RPAR COLON rtype SEMICOLON

    LPAR  shift, and go to state 186


state 167

   13 classbody: LBRACE . init bodydecs RBRACE

    LPAR  shift, and go to state 187

    init  go to state 188


state 168

   12 classdec: CLASS ID typevars IMPLEMENTS typeapps classbody .

    $default  reduce using rule 12 (classdec)


state 169

   32 type: FUNCTION LPAR LPAR types . RPAR ARROW rtype RPAR

    RPAR  shift, and go to state 189


state 170

   23 fundec: FUN ID typevars LPAR . formals RPAR block
   24       | FUN ID typevars LPAR . formals RPAR COLON rtype block

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 102 (formals)

    typeapp  go to state 60
    formal   go to state 116
    type     go to state 117
    formals  go to state 190


state 171

   28 vardec: type ID ASSIGNOP exp . SEMICOLON

    SEMICOLON  shift, and go to state 191


state 172

   37 stm: IF LPAR exp RPAR stm . ELSE stm

    ELSE  shift, and go to state 192


state 173

   38 stm: WHILE LPAR exp RPAR stm .

    $default  reduce using rule 38 (stm)


state 174

   39 stm: FOR LPAR vardec exp SEMICOLON . exp RPAR stm

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    exp       go to state 193
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 175

   43 stm: HALT LPAR exp RPAR SEMICOLON .

    $default  reduce using rule 43 (stm)


state 176

   62 factor: NEW ID LPAR actuals RPAR . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 194


state 177

   63 factor: NEW ID LANGLE types RANGLE . LPAR actuals RPAR factorrest

    LPAR  shift, and go to state 195


state 178

   64 factor: NEW type LBRACKET exp RBRACKET . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 196


state 179

  105 formalsrest: COMMA formal . formalsrest

    COMMA  shift, and go to state 153

    $default  reduce using rule 104 (formalsrest)

    formalsrest  go to state 197


state 180

   66 factor: LAMBDA LPAR formals RPAR COLON . rtype block factorrest

    VOID      shift, and go to state 198
    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    type     go to state 199
    rtype    go to state 200


state 181

   65 factor: LAMBDA LPAR formals RPAR block . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 201


state 182

  109 actualsrest: COMMA exp . actualsrest

    COMMA  shift, and go to state 157

    $default  reduce using rule 108 (actualsrest)

    actualsrest  go to state 202


state 183

   70 factorrest: LPAR actuals RPAR factorrest .

    $default  reduce using rule 70 (factorrest)


state 184

   72 factorrest: LBRACKET exp RBRACKET factorrest .

    $default  reduce using rule 72 (factorrest)


state 185

   31 type: type . LBRACKET RBRACKET
   95 typesrest: COMMA type . typesrest

    COMMA     shift, and go to state 162
    LBRACKET  shift, and go to state 104

    $default  reduce using rule 94 (typesrest)

    typesrest  go to state 203


state 186

   10 funproto: FUN ID typevars LPAR . formals RPAR SEMICOLON
   11         | FUN ID typevars LPAR . formals RPAR COLON rtype SEMICOLON

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 102 (formals)

    typeapp  go to state 60
    formal   go to state 116
    type     go to state 117
    formals  go to state 204


state 187

   14 init: LPAR . formals RPAR block

    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 102 (formals)

    typeapp  go to state 60
    formal   go to state 116
    type     go to state 117
    formals  go to state 205


state 188

   13 classbody: LBRACE init . bodydecs RBRACE

    FUNCTION  shift, and go to state 57
    FUN       shift, and go to state 58
    CONSTANT  shift, and go to state 206
    STATIC    shift, and go to state 207
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 96 (bodydecs)

    typeapp    go to state 60
    bodydec    go to state 208
    constdec   go to state 209
    globaldec  go to state 210
    fielddec   go to state 211
    formal     go to state 212
    fundec     go to state 213
    type       go to state 117
    bodydecs   go to state 214


state 189

   32 type: FUNCTION LPAR LPAR types RPAR . ARROW rtype RPAR

    ARROW  shift, and go to state 215


state 190

   23 fundec: FUN ID typevars LPAR formals . RPAR block
   24       | FUN ID typevars LPAR formals . RPAR COLON rtype block

    RPAR  shift, and go to state 216


state 191

   28 vardec: type ID ASSIGNOP exp SEMICOLON .

    $default  reduce using rule 28 (vardec)


state 192

   37 stm: IF LPAR exp RPAR stm ELSE . stm

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    block     go to state 38
    stm       go to state 217
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 193

   39 stm: FOR LPAR vardec exp SEMICOLON exp . RPAR stm

    RPAR  shift, and go to state 218


state 194

   62 factor: NEW ID LPAR actuals RPAR factorrest .

    $default  reduce using rule 62 (factor)


state 195

   63 factor: NEW ID LANGLE types RANGLE LPAR . actuals RPAR factorrest

    LPAR           shift, and go to state 19
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    $default  reduce using rule 106 (actuals)

    exp       go to state 119
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47
    actuals   go to state 219


state 196

   64 factor: NEW type LBRACKET exp RBRACKET factorrest .

    $default  reduce using rule 64 (factor)


state 197

  105 formalsrest: COMMA formal formalsrest .

    $default  reduce using rule 105 (formalsrest)


state 198

   34 rtype: VOID .

    $default  reduce using rule 34 (rtype)


state 199

   31 type: type . LBRACKET RBRACKET
   33 rtype: type .

    LBRACKET  shift, and go to state 104

    $default  reduce using rule 33 (rtype)


state 200

   66 factor: LAMBDA LPAR formals RPAR COLON rtype . block factorrest

    LBRACE  shift, and go to state 20

    block  go to state 220


state 201

   65 factor: LAMBDA LPAR formals RPAR block factorrest .

    $default  reduce using rule 65 (factor)


state 202

  109 actualsrest: COMMA exp actualsrest .

    $default  reduce using rule 109 (actualsrest)


state 203

   95 typesrest: COMMA type typesrest .

    $default  reduce using rule 95 (typesrest)


state 204

   10 funproto: FUN ID typevars LPAR formals . RPAR SEMICOLON
   11         | FUN ID typevars LPAR formals . RPAR COLON rtype SEMICOLON

    RPAR  shift, and go to state 221


state 205

   14 init: LPAR formals . RPAR block

    RPAR  shift, and go to state 222


state 206

   19 constdec: CONSTANT . PRIMTYPE ID ASSIGNOP literal SEMICOLON

    PRIMTYPE  shift, and go to state 223


state 207

   20 globaldec: STATIC . PRIMTYPE ID ASSIGNOP literal SEMICOLON

    PRIMTYPE  shift, and go to state 224


state 208

   97 bodydecs: bodydec . bodydecs

    FUNCTION  shift, and go to state 57
    FUN       shift, and go to state 58
    CONSTANT  shift, and go to state 206
    STATIC    shift, and go to state 207
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    $default  reduce using rule 96 (bodydecs)

    typeapp    go to state 60
    bodydec    go to state 208
    constdec   go to state 209
    globaldec  go to state 210
    fielddec   go to state 211
    formal     go to state 212
    fundec     go to state 213
    type       go to state 117
    bodydecs   go to state 225


state 209

   15 bodydec: constdec .

    $default  reduce using rule 15 (bodydec)


state 210

   16 bodydec: globaldec .

    $default  reduce using rule 16 (bodydec)


state 211

   17 bodydec: fielddec .

    $default  reduce using rule 17 (bodydec)


state 212

   21 fielddec: formal . SEMICOLON

    SEMICOLON  shift, and go to state 226


state 213

   18 bodydec: fundec .

    $default  reduce using rule 18 (bodydec)


state 214

   13 classbody: LBRACE init bodydecs . RBRACE

    RBRACE  shift, and go to state 227


state 215

   32 type: FUNCTION LPAR LPAR types RPAR ARROW . rtype RPAR

    VOID      shift, and go to state 198
    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    type     go to state 199
    rtype    go to state 228


state 216

   23 fundec: FUN ID typevars LPAR formals RPAR . block
   24       | FUN ID typevars LPAR formals RPAR . COLON rtype block

    COLON   shift, and go to state 229
    LBRACE  shift, and go to state 20

    block  go to state 230


state 217

   37 stm: IF LPAR exp RPAR stm ELSE stm .

    $default  reduce using rule 37 (stm)


state 218

   39 stm: FOR LPAR vardec exp SEMICOLON exp RPAR . stm

    SEMICOLON      shift, and go to state 18
    LPAR           shift, and go to state 19
    LBRACE         shift, and go to state 20
    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    RETURN         shift, and go to state 24
    IF             shift, and go to state 25
    WHILE          shift, and go to state 26
    FOR            shift, and go to state 27
    HALT           shift, and go to state 28
    NEW            shift, and go to state 29
    LAMBDA         shift, and go to state 30
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    ID             shift, and go to state 33
    UNOP           shift, and go to state 34
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36
    MINUS          shift, and go to state 37

    block     go to state 38
    stm       go to state 231
    exp       go to state 40
    lhs       go to state 41
    disjunct  go to state 42
    conjunct  go to state 43
    simple    go to state 44
    term      go to state 45
    factor    go to state 46
    literal   go to state 47


state 219

   63 factor: NEW ID LANGLE types RANGLE LPAR actuals . RPAR factorrest

    RPAR  shift, and go to state 232


state 220

   66 factor: LAMBDA LPAR formals RPAR COLON rtype block . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 233


state 221

   10 funproto: FUN ID typevars LPAR formals RPAR . SEMICOLON
   11         | FUN ID typevars LPAR formals RPAR . COLON rtype SEMICOLON

    SEMICOLON  shift, and go to state 234
    COLON      shift, and go to state 235


state 222

   14 init: LPAR formals RPAR . block

    LBRACE  shift, and go to state 20

    block  go to state 236


state 223

   19 constdec: CONSTANT PRIMTYPE . ID ASSIGNOP literal SEMICOLON

    ID  shift, and go to state 237


state 224

   20 globaldec: STATIC PRIMTYPE . ID ASSIGNOP literal SEMICOLON

    ID  shift, and go to state 238


state 225

   97 bodydecs: bodydec bodydecs .

    $default  reduce using rule 97 (bodydecs)


state 226

   21 fielddec: formal SEMICOLON .

    $default  reduce using rule 21 (fielddec)


state 227

   13 classbody: LBRACE init bodydecs RBRACE .

    $default  reduce using rule 13 (classbody)


state 228

   32 type: FUNCTION LPAR LPAR types RPAR ARROW rtype . RPAR

    RPAR  shift, and go to state 239


state 229

   24 fundec: FUN ID typevars LPAR formals RPAR COLON . rtype block

    VOID      shift, and go to state 198
    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    type     go to state 199
    rtype    go to state 240


state 230

   23 fundec: FUN ID typevars LPAR formals RPAR block .

    $default  reduce using rule 23 (fundec)


state 231

   39 stm: FOR LPAR vardec exp SEMICOLON exp RPAR stm .

    $default  reduce using rule 39 (stm)


state 232

   63 factor: NEW ID LANGLE types RANGLE LPAR actuals RPAR . factorrest

    LPAR      shift, and go to state 75
    LBRACKET  shift, and go to state 76
    DOT       shift, and go to state 77

    $default  reduce using rule 69 (factorrest)

    factorrest  go to state 241


state 233

   66 factor: LAMBDA LPAR formals RPAR COLON rtype block factorrest .

    $default  reduce using rule 66 (factor)


state 234

   10 funproto: FUN ID typevars LPAR formals RPAR SEMICOLON .

    $default  reduce using rule 10 (funproto)


state 235

   11 funproto: FUN ID typevars LPAR formals RPAR COLON . rtype SEMICOLON

    VOID      shift, and go to state 198
    FUNCTION  shift, and go to state 57
    TVAR      shift, and go to state 50
    PRIMTYPE  shift, and go to state 59
    TYPEID    shift, and go to state 51

    typeapp  go to state 60
    type     go to state 199
    rtype    go to state 242


state 236

   14 init: LPAR formals RPAR block .

    $default  reduce using rule 14 (init)


state 237

   19 constdec: CONSTANT PRIMTYPE ID . ASSIGNOP literal SEMICOLON

    ASSIGNOP  shift, and go to state 243


state 238

   20 globaldec: STATIC PRIMTYPE ID . ASSIGNOP literal SEMICOLON

    ASSIGNOP  shift, and go to state 244


state 239

   32 type: FUNCTION LPAR LPAR types RPAR ARROW rtype RPAR .

    $default  reduce using rule 32 (type)


state 240

   24 fundec: FUN ID typevars LPAR formals RPAR COLON rtype . block

    LBRACE  shift, and go to state 20

    block  go to state 245


state 241

   63 factor: NEW ID LANGLE types RANGLE LPAR actuals RPAR factorrest .

    $default  reduce using rule 63 (factor)


state 242

   11 funproto: FUN ID typevars LPAR formals RPAR COLON rtype . SEMICOLON

    SEMICOLON  shift, and go to state 246


state 243

   19 constdec: CONSTANT PRIMTYPE ID ASSIGNOP . literal SEMICOLON

    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36

    literal  go to state 247


state 244

   20 globaldec: STATIC PRIMTYPE ID ASSIGNOP . literal SEMICOLON

    NULLVALUE      shift, and go to state 21
    TRUE           shift, and go to state 22
    FALSE          shift, and go to state 23
    INTLITERAL     shift, and go to state 31
    FLOATLITERAL   shift, and go to state 32
    CHARLITERAL    shift, and go to state 35
    STRINGLITERAL  shift, and go to state 36

    literal  go to state 248


state 245

   24 fundec: FUN ID typevars LPAR formals RPAR COLON rtype block .

    $default  reduce using rule 24 (fundec)


state 246

   11 funproto: FUN ID typevars LPAR formals RPAR COLON rtype SEMICOLON .

    $default  reduce using rule 11 (funproto)


state 247

   19 constdec: CONSTANT PRIMTYPE ID ASSIGNOP literal . SEMICOLON

    SEMICOLON  shift, and go to state 249


state 248

   20 globaldec: STATIC PRIMTYPE ID ASSIGNOP literal . SEMICOLON

    SEMICOLON  shift, and go to state 250


state 249

   19 constdec: CONSTANT PRIMTYPE ID ASSIGNOP literal SEMICOLON .

    $default  reduce using rule 19 (constdec)


state 250

   20 globaldec: STATIC PRIMTYPE ID ASSIGNOP literal SEMICOLON .

    $default  reduce using rule 20 (globaldec)
